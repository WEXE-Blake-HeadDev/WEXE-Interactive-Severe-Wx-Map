html

<!DOCTYPE html>
<html>
<head>
    <title>Weather.Exe Live Severe Weather Map</title>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="styles.css" />
</head>
<body>
    <div id="header">
        <h1>Weather.Exe Live Severe Weather Map</h1>
        <div class="logo-container">
            <img src="logo.png" alt="Logo" class="logo">
        </div>
    </div>
    <div id="login">
        <label for="username">Username:</label>
        <input type="text" id="username">
        <label for="password">Password:</label>
        <input type="password" id="password">
        <button onclick="login()">Login</button>
    </div>
    <div id="userRole"></div>
    <div id="colorPickerContainer">
        <label for="colorPicker">Select Color:</label>
        <input type="color" id="colorPicker" value="#ff0000">
    </div>
    <div id="map"></div>

    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet.draw/1.0.4/leaflet.draw.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="scripts.js"></script>
</body>
</html>


//CSS STYLES
body {
    font-family: Arial, sans-serif;
    text-align: center;
    padding-top: 50px; /* Add padding to the top to make space for the logo */
    background-image: url('background.JPG'); /* Replace with the path to your image */
    background-size: cover; /* Ensure the image covers the entire background */
    background-position: center; /* Center the background image */
    background-repeat: no-repeat; /* Do not repeat the image */
    margin: 0; /* Remove default margin */
}

#map { 
    height: 600px;
    margin: 0 auto; /* Center the map */
    display: block; /* Ensure the map is a block element */
    max-width: 100%; /* Ensure the map does not exceed the width of its container */
}

#login {
    display: flex;
    flex-direction: column;
    max-width: 300px;
    margin: 20px auto; /* Center login box */
    background: rgba(255, 255, 255, 0.8); /* Add a white background with opacity */
    padding: 10px; /* Add padding */
    border-radius: 10px; /* Add rounded corners */
}

#login input { 
    margin: 5px 0;
}

.leaflet-popup-content-wrapper { 
    background: #fff; 
    color: #000; 
}

#userRole, #colorPickerContainer { 
    margin: 20px;
    text-align: center; /* Center the content */
}

#colorPicker { 
    margin-left: 10px;
}

.logo-container {
    display: flex;
    justify-content: center;
    align-items: center;
    margin-bottom: 20px;
}

.logo {
    width: 100px; /* Adjust the width as needed */
    height: auto; /* Maintain aspect ratio */
}

#header {
    font-size: 20px;
    font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;
    text-align: center;
    color: rgb(0, 0, 0); /* Ensure the header text is readable on the background image */
    position: relative; /* Ensure the header is positioned relative to its normal position */
}

#header h1 {
    margin: 0;
    padding: 10px;
}

#header .logo-container {
    margin-top: 10px; /* Add space between the header text and the logo */
}


//scripts
var map = L.map('map').setView([37.8, -96], 4);

// Base Layer
L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
    maxZoom: 18,
}).addTo(map);

// Draw Control
var drawnItems = new L.FeatureGroup();
map.addLayer(drawnItems);

var drawControl = new L.Control.Draw({
    edit: {
        featureGroup: drawnItems
    },
    draw: false
});
map.addControl(drawControl);

// Event Listener for drawing
map.on(L.Draw.Event.CREATED, function (event) {
    var layer = event.layer;

    // Get the selected color
    var color = document.getElementById('colorPicker').value;

    // Set the style for the drawn layer
    layer.setStyle({
        color: color
    });

    // Prompt the user for a message
    var message = prompt("Enter a message for this shape:");
    if (message) {
        layer.bindPopup(message);
    }

    drawnItems.addLayer(layer);
});

// Highlight Feature
function highlightFeature(e) {
    var layer = e.target;
    layer.setStyle({
        weight: 5,
        color: '#666',
        dashArray: '',
        fillOpacity: 0.7
    });
}

// Reset Highlight
function resetHighlight(e) {
    geojson.resetStyle(e.target);
}

// Zoom to Feature
function zoomToFeature(e) {
    map.fitBounds(e.target.getBounds());
}

// On Each Feature
function onEachFeature(feature, layer) {
    layer.on({
        mouseover: highlightFeature,
        mouseout: resetHighlight,
        click: zoomToFeature
    });

    if (feature.properties && feature.properties.description) {
        layer.bindPopup('<b>' + feature.properties.name + '</b><br>' + feature.properties.description);
    }
}

// Fetch Weather Alerts
function fetchWeatherAlerts() {
    $.getJSON('https://api.weather.gov/alerts/active', function(data) {
        data.features.forEach(function(feature) {
            var coords = feature.geometry.coordinates[0].map(function(coord) {
                return [coord[1], coord[0]];
            });
            var polygon = L.polygon(coords, {
                color: 'red',
                fillOpacity: 0.5
            }).addTo(map);

            var popupContent = '<b>' + feature.properties.headline + '</b><br>' + feature.properties.description;
            polygon.bindPopup(popupContent);
        });
    });
}

fetchWeatherAlerts();

// List of authorized users
var authorizedUsers = [
    { username: 'blaket05', password: '123456', role: 'admin'},
    { username: 'user1', password: 'user1123', role: 'drawer' },
    { username: 'user2', password: 'user2123', role: 'viewer' }
];

var currentUserRole = '';

function login() {
    var username = document.getElementById('username').value;
    var password = document.getElementById('password').value;

    // Check if user is authorized
    var user = authorizedUsers.find(function(u) {
        return u.username === username && u.password === password;
    });

    if (user) {
        currentUserRole = user.role;
        document.getElementById('userRole').innerText = 'Logged in as: ' + user.role;
        configureDrawControl(user.role);
    } else {
        currentUserRole = 'viewer';
        document.getElementById('userRole').innerText = 'Login failed. Logged in as: viewer';
        configureDrawControl('viewer');
    }
}

function configureDrawControl(role) {
    // Remove existing draw control
    map.removeControl(drawControl);

    if (role === 'admin' || role === 'drawer') {
        drawControl = new L.Control.Draw({
            edit: {
                featureGroup: drawnItems
            },
            draw: {
                polyline: {
                    shapeOptions: {
                        color: document.getElementById('colorPicker').value,
                        weight: 10
                    }
                },
                polygon: {
                    allowIntersection: false, // Restricts shapes to simple polygons
                    drawError: {
                        color: '#e1e100', // Color the shape will turn when intersects
                        message: '<strong>Oh snap!</strong> You can\'t draw that!' // Message that will show when intersect
                    },
                    shapeOptions: {
                        color: document.getElementById('colorPicker').value
                    }
                },
                rectangle: {
                    shapeOptions: {
                        color: document.getElementById('colorPicker').value
                    }
                },
                circle: {
                    shapeOptions: {
                        color: document.getElementById('colorPicker').value
                    }
                },
                marker: {}
            }
        });
    } else {
        drawControl = new L.Control.Draw({
            edit: {
                featureGroup: drawnItems
            },
            draw: false
        });
    }

    // Add the updated draw control to the map
    map.addControl(drawControl);
}

// Initially disable all draw options
configureDrawControl('viewer');

// Load radar layer
var radarLayer = L.tileLayer('https://tilecache.rainviewer.com/v2/radar/{z}/{x}/{y}/1/1_1.png', {
    opacity: 0.5,
    zIndex: 10
}).addTo(map);

// Load SPC Map data
$.getJSON("https://api.weather.gov/products/types/spc", function(data) {
    // Assuming data is a list of GeoJSON URLs for SPC outlooks
    data.forEach(function(url) {
        $.getJSON(url, function(spcData) {
            var spcLayer = L.geoJson(spcData, {
                style: {
                    color: "#ff0000",
                    weight: 2,
                    opacity: 1
                },
                onEachFeature: onEachFeature
            }).addTo(map);

            // Add to overlay maps
            overlayMaps["SPC Outlooks"] = spcLayer;
            L.control.layers(baseMaps, overlayMaps).addTo(map);
        });
    });
});
